
import java.util.List;
import java.util.Map;


/*
 * @file: UI.java
 * @purpose: User interface for PA2
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JLabel;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Vector;
import java.util.Hashtable;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Enumeration;
import java.util.*;

@SuppressWarnings("serial")
public class UI extends JFrame {

	private MusicManager mMngr;
	private UserManager uMngr;
	private User currUser;

	/**
	 * Creates new form UI
	 */
	public UI() {
		mMngr = new MusicManager();
		uMngr = new UserManager();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        libraryAvailabilityGroup = new javax.swing.ButtonGroup();
        songPermGroup = new javax.swing.ButtonGroup();
        searchGroup = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        libraryPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ownedList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        loanedList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        borrowedList = new javax.swing.JList();
        ownedLabel = new javax.swing.JLabel();
        borrowedLabel = new javax.swing.JLabel();
        loanedLabel = new javax.swing.JLabel();
        takeBackButton = new javax.swing.JButton();
        songPermButton = new javax.swing.JButton();
        anyoneRadio = new javax.swing.JRadioButton();
        friendsOnlyRadio = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        addSongButton = new javax.swing.JButton();
        removeSongButton = new javax.swing.JButton();
        createPlaylistButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        noAvailabilityRadio = new javax.swing.JRadioButton();
        currentlyPlayingLabel = new javax.swing.JLabel();
        sortButton = new javax.swing.JButton();
        addSongsToPlaylist = new javax.swing.JButton();
        songDetailsButton = new javax.swing.JButton();
        downloadSongsButton = new javax.swing.JButton();
        currentlyDownloadedLabel = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        downloadedList = new javax.swing.JList();
        downloadedSongsLabel = new javax.swing.JLabel();
        passTimeButton = new javax.swing.JButton();
        expireDownloadButton = new javax.swing.JButton();
        playlistPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        playListList = new javax.swing.JList();
        deletePlaylistButton = new javax.swing.JButton();
        removeSongFromPlayListButton = new javax.swing.JButton();
        friendsPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        friendsList = new javax.swing.JList();
        removeFriendButton = new javax.swing.JButton();
        browseFriendsLibraryButton = new javax.swing.JButton();
        allUsersPanel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        AllOnlineUsersList = new javax.swing.JList();
        allOnlineUsersLabel = new javax.swing.JLabel();
        addAsFriendButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList();
        friendsLibrariesRadio = new javax.swing.JRadioButton();
        allLibrariesRadio = new javax.swing.JRadioButton();
        ownLibraryRadio = new javax.swing.JRadioButton();
        searchInput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        borrowButton = new javax.swing.JButton();
        friendRequestPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        invitesList = new javax.swing.JList();
        acceptButton = new javax.swing.JButton();
        declineButton = new javax.swing.JButton();
        borrowRequestPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        borrowRequestList = new javax.swing.JList();
        allowBorrowButton = new javax.swing.JButton();
        denyBorrowButton = new javax.swing.JButton();
        trendingPanel = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        topPlayedList = new javax.swing.JList();
        jScrollPane13 = new javax.swing.JScrollPane();
        topBorrowedList = new javax.swing.JList();
        jScrollPane14 = new javax.swing.JScrollPane();
        topDownloadedList = new javax.swing.JList();
        topPlayedLabel = new javax.swing.JLabel();
        topBorrowedLabel = new javax.swing.JLabel();
        topDownloadedLabel = new javax.swing.JLabel();
        loginPane = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        usernameInput = new javax.swing.JTextField();
        passwordInput = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        logoutPane = new javax.swing.JPanel();
        logoutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ownedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(ownedList);

        loanedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(loanedList);

        borrowedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(borrowedList);

        ownedLabel.setText("Owned Songs");

        borrowedLabel.setText("Borrowed Songs");

        loanedLabel.setText("Loaned Songs");

        takeBackButton.setText("Take Back Song");
        takeBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeBackButtonActionPerformed(evt);
            }
        });

        songPermButton.setText("Set Song Permission");
        songPermButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songPermButtonActionPerformed(evt);
            }
        });

        libraryAvailabilityGroup.add(anyoneRadio);
        anyoneRadio.setSelected(true);
        anyoneRadio.setText("Anyone");
        anyoneRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anyoneRadioActionPerformed(evt);
            }
        });

        libraryAvailabilityGroup.add(friendsOnlyRadio);
        friendsOnlyRadio.setText("Friends Only");
        friendsOnlyRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendsOnlyRadioActionPerformed(evt);
            }
        });

        jLabel3.setText("Library Availability");

        addSongButton.setText("Add Song");
        addSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongButtonActionPerformed(evt);
            }
        });

        removeSongButton.setText("Remove Song");
        removeSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSongButtonActionPerformed(evt);
            }
        });

        createPlaylistButton.setText("Create Playlist");
        createPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPlaylistButtonActionPerformed(evt);
            }
        });

        playButton.setText("Play Song");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop Song");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        libraryAvailabilityGroup.add(noAvailabilityRadio);
        noAvailabilityRadio.setText("No One");
        noAvailabilityRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noAvailabilityRadioActionPerformed(evt);
            }
        });

        sortButton.setText("Sort Songs");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        addSongsToPlaylist.setText("Add Songs to Playlist");
        addSongsToPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongsToPlaylistActionPerformed(evt);
            }
        });

        songDetailsButton.setText("Song Details");
        songDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songDetailsButtonActionPerformed(evt);
            }
        });

        downloadSongsButton.setText("Download Songs");
        downloadSongsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadSongsButtonActionPerformed(evt);
            }
        });

        downloadedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane11.setViewportView(downloadedList);

        downloadedSongsLabel.setText("Downloaded Songs");

        passTimeButton.setText("Pass Time by 1 Day");
        passTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passTimeButtonActionPerformed(evt);
            }
        });

        expireDownloadButton.setText("Expire Download");
        expireDownloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expireDownloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout libraryPanelLayout = new javax.swing.GroupLayout(libraryPanel);
        libraryPanel.setLayout(libraryPanelLayout);
        libraryPanelLayout.setHorizontalGroup(
            libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryPanelLayout.createSequentialGroup()
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, libraryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addSongButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSongButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(ownedLabel))
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createPlaylistButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addSongsToPlaylist))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(songDetailsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(libraryPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                            .addComponent(currentlyPlayingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 269, Short.MAX_VALUE)
                        .addComponent(anyoneRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(libraryPanelLayout.createSequentialGroup()
                                .addComponent(friendsOnlyRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noAvailabilityRadio)))
                        .addGap(74, 74, 74))
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentlyDownloadedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(libraryPanelLayout.createSequentialGroup()
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(libraryPanelLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(borrowedLabel))
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(libraryPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(loanedLabel)))
                                    .addGroup(libraryPanelLayout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(takeBackButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(libraryPanelLayout.createSequentialGroup()
                                        .addComponent(downloadedSongsLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, libraryPanelLayout.createSequentialGroup()
                                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(passTimeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(downloadSongsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expireDownloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane11))))
                        .addContainerGap())))
            .addGroup(libraryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(songPermButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        libraryPanelLayout.setVerticalGroup(
            libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(libraryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borrowedLabel)
                    .addComponent(loanedLabel)
                    .addComponent(ownedLabel)
                    .addComponent(downloadedSongsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addSongButton)
                            .addComponent(removeSongButton)))
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(playButton)
                                .addComponent(stopButton)
                                .addComponent(takeBackButton))
                            .addComponent(expireDownloadButton)
                            .addComponent(downloadSongsButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentlyPlayingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(createPlaylistButton)
                                .addComponent(sortButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addSongsToPlaylist)
                            .addComponent(songDetailsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(songPermButton)
                            .addComponent(currentlyDownloadedLabel))
                        .addGap(57, 57, 57))
                    .addGroup(libraryPanelLayout.createSequentialGroup()
                        .addComponent(passTimeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(libraryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(anyoneRadio)
                            .addComponent(friendsOnlyRadio)
                            .addComponent(noAvailabilityRadio))))
                .addContainerGap())
        );

        tabs.addTab("Library", libraryPanel);

        playListList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane7.setViewportView(playListList);

        deletePlaylistButton.setText("Delete Playlist");
        deletePlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlaylistButtonActionPerformed(evt);
            }
        });

        removeSongFromPlayListButton.setText("Remove Song From Playlist");
        removeSongFromPlayListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSongFromPlayListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playlistPanelLayout = new javax.swing.GroupLayout(playlistPanel);
        playlistPanel.setLayout(playlistPanelLayout);
        playlistPanelLayout.setHorizontalGroup(
            playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistPanelLayout.createSequentialGroup()
                .addGap(292, 292, 292)
                .addGroup(playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playlistPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(deletePlaylistButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeSongFromPlayListButton))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(623, Short.MAX_VALUE))
        );
        playlistPanelLayout.setVerticalGroup(
            playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletePlaylistButton)
                    .addComponent(removeSongFromPlayListButton))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        tabs.addTab("Playlists", playlistPanel);

        friendsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(friendsList);

        removeFriendButton.setText("RemoveFriend");
        removeFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFriendButtonActionPerformed(evt);
            }
        });

        browseFriendsLibraryButton.setText("Browse Friends Library");
        browseFriendsLibraryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFriendsLibraryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout friendsPanelLayout = new javax.swing.GroupLayout(friendsPanel);
        friendsPanel.setLayout(friendsPanelLayout);
        friendsPanelLayout.setHorizontalGroup(
            friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(friendsPanelLayout.createSequentialGroup()
                .addGroup(friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(friendsPanelLayout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(friendsPanelLayout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(browseFriendsLibraryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeFriendButton)))
                .addContainerGap(570, Short.MAX_VALUE))
        );
        friendsPanelLayout.setVerticalGroup(
            friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(friendsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(friendsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeFriendButton)
                    .addComponent(browseFriendsLibraryButton))
                .addContainerGap(234, Short.MAX_VALUE))
        );

        tabs.addTab("Friends", friendsPanel);

        AllOnlineUsersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane10.setViewportView(AllOnlineUsersList);

        allOnlineUsersLabel.setText("All Online Users");

        addAsFriendButton.setText("Add User as Friend");
        addAsFriendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAsFriendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout allUsersPanelLayout = new javax.swing.GroupLayout(allUsersPanel);
        allUsersPanel.setLayout(allUsersPanelLayout);
        allUsersPanelLayout.setHorizontalGroup(
            allUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allUsersPanelLayout.createSequentialGroup()
                .addGroup(allUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(allUsersPanelLayout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(allUsersPanelLayout.createSequentialGroup()
                        .addGap(402, 402, 402)
                        .addComponent(allOnlineUsersLabel))
                    .addGroup(allUsersPanelLayout.createSequentialGroup()
                        .addGap(384, 384, 384)
                        .addComponent(addAsFriendButton)))
                .addContainerGap(640, Short.MAX_VALUE))
        );
        allUsersPanelLayout.setVerticalGroup(
            allUsersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allUsersPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(allOnlineUsersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addAsFriendButton)
                .addContainerGap(172, Short.MAX_VALUE))
        );

        tabs.addTab("Online Users", allUsersPanel);

        searchList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(searchList);

        searchGroup.add(friendsLibrariesRadio);
        friendsLibrariesRadio.setText("Friends Libraries");

        searchGroup.add(allLibrariesRadio);
        allLibrariesRadio.setSelected(true);
        allLibrariesRadio.setText("All Libraries");

        searchGroup.add(ownLibraryRadio);
        ownLibraryRadio.setText("Own Library");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        borrowButton.setText("Borrow Song");
        borrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(allLibrariesRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(friendsLibrariesRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ownLibraryRadio))
                    .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(628, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(borrowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allLibrariesRadio)
                    .addComponent(friendsLibrariesRadio)
                    .addComponent(ownLibraryRadio))
                .addGap(15, 15, 15))
        );

        tabs.addTab("Search Libraries", searchPanel);

        invitesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(invitesList);

        acceptButton.setText("Accept");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        declineButton.setText("Decline");
        declineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout friendRequestPanelLayout = new javax.swing.GroupLayout(friendRequestPanel);
        friendRequestPanel.setLayout(friendRequestPanelLayout);
        friendRequestPanelLayout.setHorizontalGroup(
            friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(friendRequestPanelLayout.createSequentialGroup()
                .addGroup(friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(friendRequestPanelLayout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(friendRequestPanelLayout.createSequentialGroup()
                        .addGap(376, 376, 376)
                        .addComponent(acceptButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(declineButton)))
                .addContainerGap(537, Short.MAX_VALUE))
        );
        friendRequestPanelLayout.setVerticalGroup(
            friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(friendRequestPanelLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(friendRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton)
                    .addComponent(declineButton))
                .addContainerGap(177, Short.MAX_VALUE))
        );

        tabs.addTab("Friend Requests", friendRequestPanel);

        borrowRequestList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane8.setViewportView(borrowRequestList);

        allowBorrowButton.setText("Allow");
        allowBorrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowBorrowButtonActionPerformed(evt);
            }
        });

        denyBorrowButton.setText("Deny");
        denyBorrowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                denyBorrowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout borrowRequestPanelLayout = new javax.swing.GroupLayout(borrowRequestPanel);
        borrowRequestPanel.setLayout(borrowRequestPanelLayout);
        borrowRequestPanelLayout.setHorizontalGroup(
            borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                .addGroup(borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                        .addGap(394, 394, 394)
                        .addComponent(allowBorrowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(denyBorrowButton))
                    .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(656, Short.MAX_VALUE))
        );
        borrowRequestPanelLayout.setVerticalGroup(
            borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borrowRequestPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(borrowRequestPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(denyBorrowButton)
                    .addComponent(allowBorrowButton))
                .addContainerGap(220, Short.MAX_VALUE))
        );

        tabs.addTab("Borrow Requests", borrowRequestPanel);

        topPlayedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane12.setViewportView(topPlayedList);

        topBorrowedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane13.setViewportView(topBorrowedList);

        topDownloadedList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane14.setViewportView(topDownloadedList);

        topPlayedLabel.setText("Top Played");

        topBorrowedLabel.setText("Top Borrowed");

        topDownloadedLabel.setText("Top Downloaded");

        javax.swing.GroupLayout trendingPanelLayout = new javax.swing.GroupLayout(trendingPanel);
        trendingPanel.setLayout(trendingPanelLayout);
        trendingPanelLayout.setHorizontalGroup(
            trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trendingPanelLayout.createSequentialGroup()
                .addGap(171, 171, 171)
                .addGroup(trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topPlayedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topBorrowedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topDownloadedLabel)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(174, Short.MAX_VALUE))
        );
        trendingPanelLayout.setVerticalGroup(
            trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trendingPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(topPlayedLabel)
                    .addComponent(topBorrowedLabel)
                    .addComponent(topDownloadedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(trendingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(239, Short.MAX_VALUE))
        );

        tabs.addTab("Trending", trendingPanel);

        titleLabel.setText("Music Sharing Application");

        jLabel1.setText("UserName:");

        jLabel2.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPaneLayout = new javax.swing.GroupLayout(loginPane);
        loginPane.setLayout(loginPaneLayout);
        loginPaneLayout.setHorizontalGroup(
            loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPaneLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPaneLayout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(272, 272, 272))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPaneLayout.createSequentialGroup()
                        .addComponent(welcomeLabel)
                        .addGap(235, 235, 235))))
        );
        loginPaneLayout.setVerticalGroup(
            loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addComponent(titleLabel)
                .addGap(29, 29, 29)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(loginButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeLabel)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout logoutPaneLayout = new javax.swing.GroupLayout(logoutPane);
        logoutPane.setLayout(logoutPaneLayout);
        logoutPaneLayout.setHorizontalGroup(
            logoutPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logoutPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        logoutPaneLayout.setVerticalGroup(
            logoutPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logoutPaneLayout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(logoutButton)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logoutPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
		String username = usernameInput.getText();
		char[] p = passwordInput.getPassword();
		String password = new String(p);
		currUser = uMngr.findUser(username);
		usernameInput.setText("");
		passwordInput.setText("");
		if (currUser != null && currUser.checkPassword(password.toString()))
		{
			this.tabs.setVisible(true);
			this.logoutPane.setVisible(true);
            //this.loginPane.setVisible(false);

			this.friendsList.setListData(currUser.getFriendList().toArray());

			this.ownedList.setListData(currUser.getLibrary().owned().toArray());
			this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
			this.loanedList.setListData(currUser.getLibrary().loaned().toArray());

			this.invitesList.setListData(currUser.getInvites().toArray());

			Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
			Vector<String> tmp = new Vector<String>();
			for (Map.Entry<String, Library> entry : playlists.entrySet()) {
				tmp.add(entry.getKey());
				List<Song> tmpSongs = entry.getValue().owned();
				for (Song s : tmpSongs) {
					tmp.add("  " + s.toString());
				}
			}
			playListList.setListData(tmp.toArray());

			Hashtable<String, User> users = uMngr.getUsers();
			Set<String> keys = users.keySet();
			Vector<Song> tmp2 = new Vector<Song>();
			for (String key : keys) {
//            tmp.add(key);
				User u = uMngr.findUser(key);
				if (u.getPerm() != PermType.NONE || (u.getPerm() == PermType.FRIENDS && !currUser.isFriendsWith(u))) {
					List<Song> owned = u.getLibrary().owned();
					for (Song s : owned) {
						//                tmp.add(" " + s.toString());
						tmp2.add(s);
					}
				}
				this.searchList.setListData(tmp2.toArray());
			}

			this.borrowRequestList.setListData(currUser.getLibrary().getBorrowRequests().toArray());

//			Enumeration<String> e = currUser.getLibrary().getBorrowMap(currUser).keys();
//			Vector<String> v = new Vector<String>();
//			while (e.hasMoreElements()) {
//				String s = e.nextElement();
//				System.out.println(s);
//
//				v.add(s + currUser.getLibrary().getBorrowMap(currUser).get(s));
//			}
//			this.permList.setListData(v.toArray());

			Enumeration<String> allUsers = uMngr.getUsers().keys();
			Vector<String> allUsersVector = new Vector<String>();
			while (allUsers.hasMoreElements()) {
				String s = allUsers.nextElement();
				if (!s.equals(currUser.getName())) {
					allUsersVector.add(s);
				}
			}
			this.AllOnlineUsersList.setListData(allUsersVector.toArray());

			if(currUser.hasNotifications())
			{
				List<String> notifications = currUser.getNotifications();
				for(String n : notifications)
				{
					JOptionPane.showMessageDialog(this, n);
				}
			}
			currUser.clearNotifications();

			this.downloadedList.setListData(currUser.getLibrary().downloaded().toArray());

			//top played
			List<Song> topPlayed = new ArrayList<Song>();
			allUsers = uMngr.getUsers().keys();
			while(allUsers.hasMoreElements())
			{
				String s = allUsers.nextElement();
				topPlayed.addAll(uMngr.findUser(s).getLibrary().toSortedList("played"));
			}
			Collections.sort(topPlayed, new Song.SongComparator("Played"));
			List<Song> top5Played = new ArrayList<Song>();
			for(int i = topPlayed.size() - 1; i >= topPlayed.size() - 5; --i)
			{
				if(i >= 0)
					top5Played.add(topPlayed.get(i));
//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
			}
			this.topPlayedList.setListData(top5Played.toArray());

			//top borrowed
			List<Song> topBorrowed = new ArrayList<Song>();
			allUsers = uMngr.getUsers().keys();
			while(allUsers.hasMoreElements())
			{
				String s = allUsers.nextElement();
				topBorrowed.addAll(uMngr.findUser(s).getLibrary().toSortedList("borrowed"));
			}
			Collections.sort(topBorrowed, new Song.SongComparator("borrowed"));
			List<Song> top5Borrowed = new ArrayList<Song>();
			for(int i = topBorrowed.size() - 1; i >= topBorrowed.size() - 5; --i)
			{
				if(i >= 0)
					top5Borrowed.add(topBorrowed.get(i));
//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
			}
			this.topBorrowedList.setListData(top5Borrowed.toArray());

			//top downloaded
			List<Song> topDownloaded = new ArrayList<Song>();
			allUsers = uMngr.getUsers().keys();
			while(allUsers.hasMoreElements())
			{
				String s = allUsers.nextElement();
				topDownloaded.addAll(uMngr.findUser(s).getLibrary().toSortedList("downloaded"));
			}
			Collections.sort(topDownloaded, new Song.SongComparator("downloaded"));
			List<Song> top5Downloaded = new ArrayList<Song>();
			for(int i = topDownloaded.size() - 1; i >= topDownloaded.size() - 5; --i)
			{
				if(i >= 0)
					top5Downloaded.add(topDownloaded.get(i));
//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
			}
			this.topDownloadedList.setListData(top5Downloaded.toArray());

			if(currUser.getLibrary().isPlayingSong())
			{
				this.currentlyPlayingLabel.setText("Currently Playing: " + currUser.getLibrary().playing().getName());
			} else
			{
				this.currentlyPlayingLabel.setText("");
			}

			this.welcomeLabel.setText("Welcome, " + currUser.getName());
		} else {
			JOptionPane.showMessageDialog(this, "Invalid username or password", "Error", JOptionPane.ERROR_MESSAGE);
		}
	


    }//GEN-LAST:event_loginButtonActionPerformed


    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
		this.tabs.setVisible(false);
		this.loginPane.setVisible(true);
		this.logoutPane.setVisible(false);
		this.welcomeLabel.setText("");
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
		User friend = (User) invitesList.getSelectedValue();
		if (friend == null) {
			JOptionPane.showMessageDialog(this, "Nothing selected");
		} else {
			currUser.addFriend(friend);
			friend.addFriend(currUser);
			currUser.removeInvite(friend);
			this.invitesList.setListData(currUser.getInvites().toArray());
			friendsList.setListData(currUser.getFriendList().toArray());
		}
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void removeFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFriendButtonActionPerformed
//        System.out.println(friendsList.getSelectedValue());
		User friend = uMngr.findUser((String) friendsList.getSelectedValue());
		currUser.removeFriend(friend);
		friend.removeFriend(currUser);
		friendsList.setListData(currUser.getFriendList().toArray());
    }//GEN-LAST:event_removeFriendButtonActionPerformed

    private void declineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineButtonActionPerformed
		currUser.removeInvite((User) invitesList.getSelectedValue());
		this.invitesList.setListData(currUser.getInvites().toArray());
    }//GEN-LAST:event_declineButtonActionPerformed

private void createPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPlaylistButtonActionPerformed
	List<Song> songs = ownedList.getSelectedValuesList();
	if (!songs.isEmpty()) {
		String pname = JOptionPane.showInputDialog("Enter playlistName");
		if (pname != null) {
			if (!pname.isEmpty()) {
				currUser.getLibrary().createPlaylist(pname, songs);
				Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
				Vector<String> tmp = new Vector<String>();
				for (Map.Entry<String, Library> entry : playlists.entrySet()) {
					tmp.add(entry.getKey());
					List<Song> tmpSongs = entry.getValue().owned();
					for (Song s : tmpSongs) {
						tmp.add("  " + s.toString());
					}
				}
				playListList.setListData(tmp.toArray());
			} else {
				JOptionPane.showMessageDialog(this, "Playlist name cannot be empty");
			}
		}
	} else {
		JOptionPane.showMessageDialog(this, "You must select at least one song to add to playlist.");
	}
}//GEN-LAST:event_createPlaylistButtonActionPerformed

private void deletePlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlaylistButtonActionPerformed
//    String p = JOptionPane.showInputDialog("Enter playlist name");
//    Library playlist = currUser.getLibrary().getPlaylist(p);
//    if(playlist != null)
//    {
//        currUser.getLibrary().removePlaylist(p);
//    } else
//    {
//        JOptionPane.showMessageDialog(this, "Invalid playlist name");
//    }

	JPanel panel = new JPanel();

	JList list = new JList();
	Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
	Vector<String> tmp = new Vector<String>();
	for (Map.Entry<String, Library> entry : playlists.entrySet()) {
		tmp.add(entry.getKey());
	}

	if (!tmp.isEmpty()) {
		list.setListData(tmp.toArray());
		panel.add(list);

		int result = JOptionPane.showOptionDialog(this, panel, "Delete playlist: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

		if (result == JOptionPane.OK_OPTION) {
			String p = (String) list.getSelectedValue();
			if(p != null)
			{
				currUser.getLibrary().removePlaylist(p);
			} else
			{
				JOptionPane.showMessageDialog(this, "No playlist selected.");
			}
		}
	}

	Vector<String> tmp2 = new Vector<String>();
	for (Map.Entry<String, Library> entry : playlists.entrySet()) {
		tmp2.add(entry.getKey());
		List<Song> tmpSongs = entry.getValue().owned();
		for (Song s : tmpSongs) {
			tmp2.add("  " + s.toString());
		}
	}
	playListList.setListData(tmp2.toArray());
}//GEN-LAST:event_deletePlaylistButtonActionPerformed

private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
	String search = searchInput.getText();
	if (allLibrariesRadio.isSelected()) {
//		if(!currUser.getFriends().isEmpty())
//		{
			Hashtable<String, User> users = uMngr.getUsers();
			Set<String> keys = users.keySet();
	//        Vector<String> tmp = new Vector<String>();
			Vector<Song> tmp = new Vector<Song>();
			for (String key : keys)
			{
				User u = uMngr.findUser(key);
				if (u.getPerm() != PermType.NONE || (u.getPerm() == PermType.FRIENDS && !currUser.isFriendsWith(u))) {
					//            tmp.add(key);

					List<Song> owned = u.getLibrary().owned();
					for (Song s : owned) {
						if (s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase())) 
						{
							//                    tmp.add(" " + s.toString());
							tmp.add(s);
						}
					}
				}
				this.searchList.setListData(tmp.toArray());
			}
//		} else
//		{
//			Vector<Song> tmp = new Vector<Song>();
//			List<Song> owned = currUser.getLibrary().owned();
//			for (Song s : owned) {
//				if (s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase())) {
//	//                tmp.add(" " + s.toString());
//					tmp.add(s);
//				}
//			}
//			this.searchList.setListData(tmp.toArray());
//		}
	} else if (friendsLibrariesRadio.isSelected()) {
		if(!currUser.getFriends().isEmpty())
		{
			List<User> friends = currUser.getFriends();
			Vector<Song> tmp = new Vector<Song>();
			for (User u : friends) 
			{
	//            tmp.add(u.getName());
				if (u.getPerm() != PermType.NONE) 
				{
					List<Song> owned = u.getLibrary().owned();
					for (Song s : owned) {
						if (s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase())) 
						{
	//                    tmp.add(" " + s.toString());
							tmp.add(s);
						}
					}
				}

			}
			this.searchList.setListData(tmp.toArray());
		} else
		{
			Vector<String> empty = new Vector<String>();
			this.searchList.setListData(empty.toArray());
		}
	} else if (ownLibraryRadio.isSelected()) {
		Vector<Song> tmp = new Vector<Song>();
		List<Song> owned = currUser.getLibrary().owned();
		for (Song s : owned) {
			if (s.getName().toLowerCase().startsWith(search.toLowerCase()) || s.getMetaData().get("artist").toLowerCase().startsWith(search.toLowerCase())) {
//                tmp.add(" " + s.toString());
				tmp.add(s);
			}
		}
		this.searchList.setListData(tmp.toArray());
	} 
}//GEN-LAST:event_searchButtonActionPerformed

private void addSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongButtonActionPerformed
	JTextField songName = new JTextField();
	JTextField artist = new JTextField();
	JTextField genre = new JTextField();
	JTextField album = new JTextField();
	JTextField year = new JTextField();
	Object[] inputs = {
		"Name:", songName,
		"Artist", artist,
		"Genre", genre,
		"Album", album,
		"Year", year
	};
	int result = JOptionPane.showConfirmDialog(this, inputs, "Add Song", JOptionPane.OK_CANCEL_OPTION);
	while ((songName.getText().equals("") || artist.getText().equals("")) && result != JOptionPane.CANCEL_OPTION) {
		JOptionPane.showMessageDialog(this, "Name and artist cannot be blank", "Invalid Input", JOptionPane.ERROR_MESSAGE);
		result = JOptionPane.showConfirmDialog(this, inputs, "Add Song", JOptionPane.OK_CANCEL_OPTION);
	}
	
	if(result != JOptionPane.CANCEL_OPTION)
	{
	try
		{
			Integer.parseInt(year.getText());

			String[][] songMeta = {
				{"name", songName.getText()},
				{"artist", artist.getText()},
				{"genre", genre.getText()},
				{"album", album.getText()},
				{"year", year.getText()}
			};
			currUser.getLibrary().addSong(new Song(new Metadata(songMeta)));
			ownedList.setListData(currUser.getLibrary().owned().toArray());
		} catch(java.lang.NumberFormatException e)
		{
			JOptionPane.showMessageDialog(this, "Invalid Year");
		}
	}

}//GEN-LAST:event_addSongButtonActionPerformed

private void removeSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSongButtonActionPerformed
	List<Song> selected = ownedList.getSelectedValuesList();
	for (Song s : selected) {
		if(currUser.getLibrary().hasWaitingList(s))
		{
			Queue<User> users = currUser.getLibrary().getWaitingListUsers(s);
			for(User u : users)
			{
				u.addNotification(s.getName() + " is no longer available.");
			}
		}
		List<User> friends = currUser.getFriends();
		for (User f : friends) {
			if (f.getLibrary().borrowed().contains(s)) {
				mMngr.takeBack(f, s);
				f.addNotification(s.getName() + " has been removed.");
			}

		}

		Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
		for (Map.Entry<String, Library> entry : playlists.entrySet())
		{
			if(entry.getValue().contains(s))
			{
				entry.getValue().removeSong(s);
			}
		}
		currUser.getLibrary().removeSong(s);

			Vector<String> tmp = new Vector<String>();
			for (Map.Entry<String, Library> entry : playlists.entrySet()) {
				tmp.add(entry.getKey());
				List<Song> tmpSongs = entry.getValue().owned();
				for (Song song : tmpSongs) {
					tmp.add("  " + song.toString());
				}
			}
			playListList.setListData(tmp.toArray());
	}
	
	loanedList.setListData(currUser.getLibrary().loaned().toArray());
	ownedList.setListData(currUser.getLibrary().owned().toArray());
}//GEN-LAST:event_removeSongButtonActionPerformed

private void songPermButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songPermButtonActionPerformed
	List<Song> selected = ownedList.getSelectedValuesList();
	for (Song s : selected) {
		JPanel panel = new JPanel();
		JList friendList = new JList();
		friendList.setListData(currUser.getFriends().toArray());
		JRadioButton approval = new JRadioButton("Approval Required");
		approval.setSelected(true);
		JRadioButton noApproval = new JRadioButton("No Approval");
		JRadioButton notBorrowable = new JRadioButton("Not Borrowable");
//            JTextField friendName = new JTextField();
		JTextField limit = new JTextField();
		JTextField plimit = new JTextField();
		Object[] inputs = {
			//                "Friend Name", friendName,
			"Borrow Limit", limit,
			"Play Limit", plimit
		};
		ButtonGroup bg = new ButtonGroup();
		bg.add(approval);
		bg.add(noApproval);
		bg.add(notBorrowable);
		panel.add(friendList);
		panel.add(approval);
		panel.add(noApproval);
		panel.add(notBorrowable);
		if(JOptionPane.showOptionDialog(this, panel, "Select permission type", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null) == JOptionPane.CANCEL_OPTION)
			return;
		User friend = (User) friendList.getSelectedValue();
		if(friend != null)
		{
			JOptionPane.showMessageDialog(this, inputs);

			JPanel panel2 = new JPanel();
			JRadioButton notDownloadable = new JRadioButton("No");
			JRadioButton downloadable = new JRadioButton("Yes");
			downloadable.setSelected(true);
			ButtonGroup bg2 = new ButtonGroup();
			bg2.add(notDownloadable);
			bg2.add(downloadable);
			panel2.add(notDownloadable);
			panel2.add(downloadable);

			if(JOptionPane.showOptionDialog(this, panel2, "Can this song be downloaded?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null) == JOptionPane.CANCEL_OPTION)
				return;

			if (!limit.getText().matches("[-+]?\\d*\\.?\\d+") || !plimit.getText().matches("[-+]?\\d*\\.?\\d+")) {
				JOptionPane.showMessageDialog(this, "Invalid limit");
			} else {
				//                    System.out.println(Integer.parseInt(limit.getText()));
				if (approval.isSelected()) {
					currUser.getLibrary().setBorrowLimit(friend.toString(), s.getName(), Integer.parseInt(limit.getText()), Library.borrowSetting.APPROVE);
				} else if (noApproval.isSelected()) {
					currUser.getLibrary().setBorrowLimit(friend.toString(), s.getName(), Integer.parseInt(limit.getText()), Library.borrowSetting.LIMIT);
				} else //not borrowable
				{
					currUser.getLibrary().setBorrowLimit(friend.toString(), s.getName(), Integer.parseInt(limit.getText()), Library.borrowSetting.NO);
				}
				currUser.getLibrary().setPlayLimit(friend.toString(), s.getName(), Integer.parseInt(plimit.getText()));

				if(notDownloadable.isSelected())
				{
					currUser.getLibrary().setDownloadPermission(friend, false);
				} else if(downloadable.isSelected())
				{
					currUser.getLibrary().setDownloadPermission(friend, true);
				}
			}
		} else
		{
			JOptionPane.showMessageDialog(this, "No friend selected");
		}
	}
}//GEN-LAST:event_songPermButtonActionPerformed

private void anyoneRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anyoneRadioActionPerformed
	currUser.setPerm(PermType.ALL);
}//GEN-LAST:event_anyoneRadioActionPerformed

private void friendsOnlyRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendsOnlyRadioActionPerformed
	currUser.setPerm(PermType.FRIENDS);
}//GEN-LAST:event_friendsOnlyRadioActionPerformed

private void noAvailabilityRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noAvailabilityRadioActionPerformed
	currUser.setPerm(PermType.NONE);

}//GEN-LAST:event_noAvailabilityRadioActionPerformed

private void borrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowButtonActionPerformed
	List<Song> selected = searchList.getSelectedValuesList();
	for (Song s : selected) {
//        System.out.println(s.toString());
		if(currUser.getLibrary().isOwned(s))
			JOptionPane.showMessageDialog(this, "You own this song.");
		List<User> friends = currUser.getFriends();
		boolean belongsToFriend = false;
		for (User f : friends) {
			if (f.getLibrary().isOwned(s)) {
				belongsToFriend = true;
				if (f.getLibrary().checkIfBorrowable(currUser, s)) {

					if (f.getLibrary().isLIMIT(f.getLibrary().getSongBorrowLimit(currUser, s).fst)) {
						if (f.getLibrary().loaned().contains(s)) {
//							if(currUser.getLibrary().get)
							if(f.getLibrary().hasWaitingList(s))
							{
								if(f.getLibrary().getWaitingListUsers(s).contains(currUser))
								{
									JOptionPane.showMessageDialog(this, "You are already on the wait list");
								} else
								{
									JOptionPane.showMessageDialog(this, "You have been added to wait list");
									f.getLibrary().sendBorrow(currUser, s);
								}
							} else
							{
								JOptionPane.showMessageDialog(this, "You have been added to wait list");
								f.getLibrary().sendBorrow(currUser, s);
							}
						} else {
							JOptionPane.showMessageDialog(this, "Borrow successful!");
							f.getLibrary().sendBorrow(currUser, s);
						}
						s.incrementBorrowedCount();
					} else {
						f.getLibrary().createBorrowRequest(currUser, s);
						s.incrementBorrowedCount();
						JOptionPane.showMessageDialog(this, "Request being sent to " + f);
					}
				} else {
					JOptionPane.showMessageDialog(this, "You do not have the permissions to borrow " + s.getName());
				}
			}
		}
		if(!belongsToFriend)
			JOptionPane.showMessageDialog(this, "You do not have the permissions to borrow " + s.getName());
	}
	this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
//    this.loanedList.setListData(currUser.getLibrary().loaned().toArray());

	//top borrowed
	List<Song> topBorrowed = new ArrayList<Song>();
	Enumeration<String> allUsers = uMngr.getUsers().keys();
	while(allUsers.hasMoreElements())
	{
		String s = allUsers.nextElement();
		topBorrowed.addAll(uMngr.findUser(s).getLibrary().toSortedList("borrowed"));
	}
	Collections.sort(topBorrowed, new Song.SongComparator("borrowed"));
	List<Song> top5Borrowed = new ArrayList<Song>();
	for(int i = topBorrowed.size() - 1; i >= topBorrowed.size() - 5; --i)
	{
		if(i >= 0)
			top5Borrowed.add(topBorrowed.get(i));
//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
	}
	this.topBorrowedList.setListData(top5Borrowed.toArray());
}//GEN-LAST:event_borrowButtonActionPerformed

private void allowBorrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowBorrowButtonActionPerformed
	List<Pair<User, Song>> selected = borrowRequestList.getSelectedValuesList();
	for (Pair<User, Song> p : selected) {
		currUser.getLibrary().acceptBorrowRequest(p);
	}
	this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
	this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());

	this.borrowRequestList.setListData(currUser.getLibrary().getBorrowRequests().toArray());
}//GEN-LAST:event_allowBorrowButtonActionPerformed

private void denyBorrowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_denyBorrowButtonActionPerformed
	List<Pair<User, Song>> selected = borrowRequestList.getSelectedValuesList();
	for (Pair<User, Song> p : selected) {
		currUser.getLibrary().removeBorrowRequest(p);
	}
	this.borrowRequestList.setListData(currUser.getLibrary().getBorrowRequests().toArray());
}//GEN-LAST:event_denyBorrowButtonActionPerformed

private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
	if (currUser.getLibrary().isPlayingSong()) {
		JOptionPane.showMessageDialog(this, "You are already playing a song");
	} else {
		String[] buttons = {"Play owned song", "Play borrowed song"};
		int returnVal = JOptionPane.showOptionDialog(this, "Play from where?", "Play Song", 0, 0, null, buttons, buttons[0]);
		if (returnVal == 0) {
			Song selected = (Song) ownedList.getSelectedValue();
			if (!currUser.getLibrary().loaned().contains(selected)) {
				if (selected == null) {
					JOptionPane.showMessageDialog(this, "No song selected");
				} else {
					currUser.getLibrary().play(selected);
					currentlyPlayingLabel.setText("Currently Playing: " + selected.getName());
					selected.incrementPlayedCount();
					//top played
					List<Song> topPlayed = new ArrayList<Song>();
					Enumeration<String> allUsers = uMngr.getUsers().keys();
					while(allUsers.hasMoreElements())
					{
						String s = allUsers.nextElement();
						topPlayed.addAll(uMngr.findUser(s).getLibrary().toSortedList("played"));
					}
					Collections.sort(topPlayed, new Song.SongComparator("Played"));
					List<Song> top5Played = new ArrayList<Song>();
					for(int i = topPlayed.size() - 1; i >= topPlayed.size() - 5; --i)
					{
						if(i >= 0)
							top5Played.add(topPlayed.get(i));
		//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
					}
					this.topPlayedList.setListData(top5Played.toArray());

				}
			} else {
				JOptionPane.showMessageDialog(this, "This song is loaned");
			}
		} else {
			Song selected = (Song) borrowedList.getSelectedValue();
			if (selected == null) {
				JOptionPane.showMessageDialog(this, "No song selected");
			} else {
				currUser.getLibrary().play(selected);
				currentlyPlayingLabel.setText("Currently Playing: " + selected.getName());
				selected.incrementPlayedCount();
				
				//top played
				List<Song> topPlayed = new ArrayList<Song>();
				Enumeration<String> allUsers = uMngr.getUsers().keys();
				while(allUsers.hasMoreElements())
				{
					String s = allUsers.nextElement();
					topPlayed.addAll(uMngr.findUser(s).getLibrary().toSortedList("played"));
				}
				Collections.sort(topPlayed, new Song.SongComparator("Played"));
				List<Song> top5Played = new ArrayList<Song>();
				for(int i = topPlayed.size() - 1; i >= topPlayed.size() - 5; --i)
				{
					if(i >= 0)
						top5Played.add(topPlayed.get(i));
	//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
				}
				this.topPlayedList.setListData(top5Played.toArray());
			}
		}
	}
}//GEN-LAST:event_playButtonActionPerformed

private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
	if (!currUser.getLibrary().isPlayingSong()) {
		JOptionPane.showMessageDialog(this, "You are not playing anything");
	} else {
		currUser.getLibrary().stop();
		currentlyPlayingLabel.setText("");
	}
	this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
}//GEN-LAST:event_stopButtonActionPerformed

private void takeBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeBackButtonActionPerformed
	Song selected = (Song) loanedList.getSelectedValue();
	if (selected == null) {
		JOptionPane.showMessageDialog(this, "Nothing Selected");
	} else {
		List<User> friends = currUser.getFriends();
		for (User f : friends) {
			if (f.getLibrary().borrowed().contains(selected)) {
				if(f.getLibrary().hasDownloadedSong(selected))
				{
					f.getLibrary().setPlaysToZero(selected);
					JOptionPane.showMessageDialog(this, "This song is currently downloaded to a mobile device and will be returned when download expires.");
				} else
				{
					mMngr.takeBack(f, selected);
				}
			}

		}
//        System.out.println(selected);

	}
	this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
}//GEN-LAST:event_takeBackButtonActionPerformed

    private void addAsFriendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAsFriendButtonActionPerformed
		List<String> users = AllOnlineUsersList.getSelectedValuesList();
		for (String u : users) {
			User friend = uMngr.findUser(u);
			if (friend != null) {
				if (currUser.isFriendsWith(friend)) {
					JOptionPane.showMessageDialog(this, "You are already friends with " + friend);
				} else {
					if(!currUser.getInvites().contains(friend))
					{
						currUser.sendInvite(friend);
						JOptionPane.showMessageDialog(this, "Invite sent to " + friend);
					} else
					{
						JOptionPane.showMessageDialog(this, friend + " has already sent you a friend requests, please accept it.");
					}
				}
			} else {
				JOptionPane.showMessageDialog(this, "User does not exist");
			}
		}
    }//GEN-LAST:event_addAsFriendButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
		JPanel panel = new JPanel();

		JRadioButton songNameRadio = new JRadioButton("Song Name");
		JRadioButton albumRadio = new JRadioButton("album");
		JRadioButton artistRadio = new JRadioButton("artist");

		ButtonGroup bg = new ButtonGroup();
		bg.add(songNameRadio);
		bg.add(albumRadio);
		bg.add(artistRadio);

		panel.add(songNameRadio);
		panel.add(albumRadio);
		panel.add(artistRadio);

		int result = JOptionPane.showOptionDialog(this, panel, "Sort songs by: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

		if (result == JOptionPane.OK_OPTION) {
			if (songNameRadio.isSelected()) {
				this.ownedList.setListData(currUser.getLibrary().toSortedList("name").toArray());
			} else if (albumRadio.isSelected()) {
				this.ownedList.setListData(currUser.getLibrary().toSortedList("album").toArray());
			} else if (artistRadio.isSelected()) {
				this.ownedList.setListData(currUser.getLibrary().toSortedList("artist").toArray());
			}
		}
    }//GEN-LAST:event_sortButtonActionPerformed

        private void addSongsToPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongsToPlaylistActionPerformed
			JPanel panel = new JPanel();

			JList list = new JList();
			Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
			Vector<String> tmp = new Vector<String>();
			for (Map.Entry<String, Library> entry : playlists.entrySet()) {
				tmp.add(entry.getKey());
			}
			List<Song> songsToAdd = ownedList.getSelectedValuesList();
			if (!songsToAdd.isEmpty()) {
				if (!tmp.isEmpty()) {
					list.setListData(tmp.toArray());
					panel.add(list);

					int result = JOptionPane.showOptionDialog(this, panel, "Add to playlist: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

					if (result == JOptionPane.OK_OPTION) {
						String Playlist = (String) list.getSelectedValue();
						for (Song s : songsToAdd) {
							currUser.getLibrary().getPlaylist(Playlist).addSong(s);
						}
					}

					playlists = currUser.getLibrary().getPlayLists();
					Vector<String> tmp2 = new Vector<String>();
					for (Map.Entry<String, Library> entry : playlists.entrySet()) {
						tmp2.add(entry.getKey());
						List<Song> tmpSongs = entry.getValue().owned();
						for (Song s : tmpSongs) {
							tmp2.add("  " + s.toString());
						}
					}
					this.playListList.setListData(tmp2.toArray());
				} else {
					JOptionPane.showMessageDialog(this, "No playlists available.");
				}
			} else {
				JOptionPane.showMessageDialog(this, "No songs selected.");
			}
        }//GEN-LAST:event_addSongsToPlaylistActionPerformed

    private void removeSongFromPlayListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSongFromPlayListButtonActionPerformed
		JPanel panel = new JPanel();

		JList list = new JList();
		Map<String, Library> playlists = currUser.getLibrary().getPlayLists();
		Vector<String> tmp = new Vector<String>();
		for (Map.Entry<String, Library> entry : playlists.entrySet()) {
			tmp.add(entry.getKey());
		}

		if (!tmp.isEmpty()) {
			list.setListData(tmp.toArray());
			panel.add(list);

			int result = JOptionPane.showOptionDialog(this, panel, "Remove from playlist: ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);

			if (result == JOptionPane.OK_OPTION) {
				Library playlist = currUser.getLibrary().getPlaylist((String) list.getSelectedValue());
				JPanel panel2 = new JPanel();

				JList list2 = new JList();
				list2.setListData(playlist.owned().toArray());
				panel2.add(list2);

				int result2 = JOptionPane.showOptionDialog(this, panel2, "Select Songs", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
				if (result2 == JOptionPane.OK_OPTION) {
					playlist.removeSong((Song) list2.getSelectedValue());

					Map<String, Library> allPlaylists = currUser.getLibrary().getPlayLists();
					Vector<String> tmp2 = new Vector<String>();
					for (Map.Entry<String, Library> entry : allPlaylists.entrySet()) {
						tmp2.add(entry.getKey());
						List<Song> tmpSongs = entry.getValue().owned();
						for (Song s : tmpSongs) {
							tmp2.add("  " + s.toString());
						}
					}
					playListList.setListData(tmp2.toArray());

				}
			}
		} else {
			JOptionPane.showMessageDialog(this, "You have no playlists currently.");
		}
    }//GEN-LAST:event_removeSongFromPlayListButtonActionPerformed

    private void browseFriendsLibraryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFriendsLibraryButtonActionPerformed
		JPanel panel = new JPanel();
		panel.setLayout(new BoxLayout(panel, javax.swing.BoxLayout.Y_AXIS));
		panel.add(new JLabel("Songs:"));
		JList list = new JList();
		JList list2 = new JList();

		User friend = uMngr.findUser((String) friendsList.getSelectedValue());
		if (friend != null) {
			if (friend.getPerm() != PermType.NONE) {
				list.setListData(friend.getLibrary().owned().toArray());
				panel.add(list);
				Map<String, Library> playlists = friend.getLibrary().getPlayLists();
				Vector<String> tmp = new Vector<String>();
				for (Map.Entry<String, Library> entry : playlists.entrySet()) {
					tmp.add(entry.getKey());
					List<Song> tmpSongs = entry.getValue().owned();
					for (Song s : tmpSongs) {
						tmp.add("  " + s.toString());
					}
				}
				list2.setListData(tmp.toArray());
				panel.add(new JLabel("Playlists:"));
				panel.add(list2);
				JOptionPane.showOptionDialog(this, panel, friend + "'s Library", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
			} else {
				JOptionPane.showMessageDialog(this, "You don't have permissions to view " + friend + "'s library.");
			}
		}

    }//GEN-LAST:event_browseFriendsLibraryButtonActionPerformed

    private void songDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songDetailsButtonActionPerformed
		JPanel panel = new JPanel();
		ButtonGroup bg = new ButtonGroup();
		JRadioButton owned = new JRadioButton("owned song");
		JRadioButton borrowed = new JRadioButton("borrowed song");
		JRadioButton loaned = new JRadioButton("loaned song");

		bg.add(owned);
		bg.add(borrowed);
		bg.add(loaned);
		panel.add(owned);
		panel.add(borrowed);
		panel.add(loaned);

		int result = JOptionPane.showOptionDialog(this, panel, "Get song details from:", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
		if (result == JOptionPane.OK_OPTION) {
			if (owned.isSelected()) {
				Song s = (Song) ownedList.getSelectedValue();
				if(s != null)
				{
					JPanel panel2 = new JPanel();
					JList list = new JList();

					Vector<String> tmp = new Vector<String>();

					String tmpString = s.getName() != null ? s.getName() : "";
					tmp.add("Name: " + tmpString);
					tmpString = s.get("artist") != null ? s.get("artist") : "";
					tmp.add("Artist: " + tmpString);
					tmpString = s.get("album") != null ? s.get("album") : "";
					tmp.add("Album: " + tmpString);
					tmpString = s.get("genre") != null ? s.get("genre") : "";
					tmp.add("Genre: " + tmpString);
					tmpString = s.get("composer") != null ? s.get("composer") : "";
					tmp.add("Composer: " + tmpString);
					tmpString = s.get("year") != null ? s.get("year") : "";
					tmp.add("Year: " + tmpString);

					list.setListData(tmp.toArray());
					panel2.add(list);

					JOptionPane.showOptionDialog(this, panel2, "Song details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
				} else
				{
					JOptionPane.showMessageDialog(this, "Nothing selected.");
				}
			} else if (borrowed.isSelected()) {
				Song s = (Song) borrowedList.getSelectedValue();
				if(s != null)
				{

					JPanel panel2 = new JPanel();
					JList list = new JList();

					Vector<String> tmp = new Vector<String>();

					tmp.add("Name: " + s.getName());
					tmp.add("Artist: " + s.get("artist"));
					tmp.add("Album: " + s.get("album"));
					tmp.add("Genre: " + s.get("genre"));
					tmp.add("Composer: " + s.get("composer"));
					tmp.add("Year: " + s.getYear());
					tmp.add("Borrowed from: " + currUser.getLibrary().getOwnerofBorrowed(s));
					tmp.add("Plays left: " + currUser.getLibrary().getPlaysLeftOfBorrowed(s));

					list.setListData(tmp.toArray());
					panel2.add(list);

					JOptionPane.showOptionDialog(this, panel2, "Song details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
				} else
				{
					JOptionPane.showMessageDialog(this, "Nothing selected.");
				}
			} else if (loaned.isSelected()) {
				Song s = (Song) loanedList.getSelectedValue();
				if(s != null)
				{

					JPanel panel2 = new JPanel();
					JList list = new JList();

					Vector<String> tmp = new Vector<String>();

					tmp.add("Name: " + s.getName());
					tmp.add("Artist: " + s.get("artist"));
					tmp.add("Album: " + s.get("album"));
					tmp.add("Genre: " + s.get("genre"));
					tmp.add("Composer: " + s.get("composer"));
					tmp.add("Year: " + s.getYear());
	//				tmp.add("Loaned to: " + currUser.getLibrary().)

					list.setListData(tmp.toArray());
					panel2.add(list);

					JOptionPane.showOptionDialog(this, panel2, "Song details", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
				} else
				{
					JOptionPane.showMessageDialog(this, "Nothing selected.");
				}
			} else {
				JOptionPane.showMessageDialog(this, "No list selected.");
			}
		}

    }//GEN-LAST:event_songDetailsButtonActionPerformed

    private void downloadSongsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadSongsButtonActionPerformed
//        Timer timer = new Timer(8640000, new ActionListener()
//		Timer timer = new Timer(6000, new ActionListener()
//				{
//					@Override
//					public void actionPerformed(ActionEvent arg0)
//					{
//						//Upload song
//						
//						JOptionPane.showMessageDialog(null, "Works");
//					}
//				});
//		timer.setRepeats(false);
//		timer.start();

		String[] buttons = {"Download owned song", "Download borrowed song"};
		int returnVal = JOptionPane.showOptionDialog(this, "Download songs from where?", "Download Song", 0, 0, null, buttons, buttons[0]);
		if(returnVal == 0) //owned
		{
			List<Song> songs = ownedList.getSelectedValuesList();
			if(!songs.isEmpty())
			{
				for(Song song : songs)
				{
					if(currUser.getLibrary().isAvailableToDownload(song))
					{
						currUser.getLibrary().download(song);
						song.incrementDownloadedCount();
					} else
					{
						JOptionPane.showMessageDialog(this, "This song is unavailable for download.");
					}
				}
			} else
			{
				JOptionPane.showMessageDialog(this, "Nothing selected.");
			}
		} else //borrowed
		{
			List<Song> songs = borrowedList.getSelectedValuesList();
			if(songs != null)
			{
				
				for(Song song : songs)
				{
					if(currUser.getLibrary().isAvailableToDownload(song))
					{
						currUser.getLibrary().download(song);
						song.incrementDownloadedCount();
					} else
					{
						JOptionPane.showMessageDialog(this, "This song is unavailable for download.");
					}
				}
			} else
			{
				JOptionPane.showMessageDialog(this, "Nothing selected.");
			}
		}

		this.downloadedList.setListData(currUser.getLibrary().downloaded().toArray());

		//top downloaded
		List<Song> topDownloaded = new ArrayList<Song>();
		Enumeration<String> allUsers = uMngr.getUsers().keys();
		while(allUsers.hasMoreElements())
		{
			String s = allUsers.nextElement();
			topDownloaded.addAll(uMngr.findUser(s).getLibrary().toSortedList("downloaded"));
		}
		Collections.sort(topDownloaded, new Song.SongComparator("downloaded"));
		List<Song> top5Downloaded = new ArrayList<Song>();
		for(int i = topDownloaded.size() - 1; i >= topDownloaded.size() - 5; --i)
		{
			if(i >= 0)
				top5Downloaded.add(topDownloaded.get(i));
//				System.out.println(topPlayed.get(i) + "" + topPlayed.get(i).getPlayedCount());
		}
		this.topDownloadedList.setListData(top5Downloaded.toArray());
    }//GEN-LAST:event_downloadSongsButtonActionPerformed

    private void passTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passTimeButtonActionPerformed
        uMngr.expireAllDownloads();
		this.downloadedList.setListData(currUser.getLibrary().downloaded().toArray());
		this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
		this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
    }//GEN-LAST:event_passTimeButtonActionPerformed

    private void expireDownloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expireDownloadButtonActionPerformed
		Song selected = (Song)this.downloadedList.getSelectedValue();
		if(selected != null)
		{
			currUser.getLibrary().expireDownload(selected);
		} else
		{
			JOptionPane.showMessageDialog(this, "Nothing Selected.");
		}
		this.downloadedList.setListData(currUser.getLibrary().downloaded().toArray());
		this.borrowedList.setListData(currUser.getLibrary().borrowed().toArray());
		this.loanedList.setListData(currUser.getLibrary().loaned().toArray());
    }//GEN-LAST:event_expireDownloadButtonActionPerformed

	private void parseFile(String file) {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(file));
			String line, userLogin, userData;
			HashMap<User, String[]> friendsToAdd = new HashMap<User, String[]>();

			while ((line = reader.readLine()) != null) {
				//remove white space
				line = line.replaceAll("\t", "");
				if (line.isEmpty()) break;
				
				userLogin = line.substring(0, line.indexOf('[', 0));
				userData = line.substring(line.indexOf('[', 0), line.length());
				userLogin = userLogin.replaceAll(" ", "");

				if (userLogin.isEmpty() || userData.isEmpty()) break; //break if line is empty

				//username
				int lowerBound = 0;
				int upperBound = userLogin.indexOf(',');
				String user = userLogin.substring(lowerBound, upperBound);

				//password
				lowerBound = ++upperBound;
				String pw = userLogin.substring(lowerBound, userLogin.length());

				//if user or pw is empty, create default admin user and return
				if(user.isEmpty()) {
					user = "default";
				}
				if(pw.isEmpty()) {
					pw = "default";
				}
				//create user
				User u = new User(user, pw);
				uMngr.addUser(u);

				//song metadata
				lowerBound = 1;
				upperBound = userData.indexOf(']', lowerBound);
				if(upperBound != lowerBound) {
					String songsFull = userData.substring(lowerBound, upperBound);
					String[] songs = songsFull.split("\\|");
					//remove leading spaces
					for (int i = 0; i < songs.length; ++i) {
						String[] data = songs[i].split(",");
						for (int x = 0; x < data.length; x++) {
							while (!data[x].isEmpty()) {
								if (data[x].charAt(0) == ' ') {
									data[x] = data[x].substring(1);
								} else break;
							}
						}
						//don't add song if it doesn't have name or artist
						if (!data[0].isEmpty() && !data[1].isEmpty()) {
							Metadata m = new Metadata();
							m.put("name", data[0]);
							m.put("artist", data[1]);
							m.put("album", data[2]);
							m.put("year", data[3]);
							m.put("composer", data[4]);
							m.put("genre", data[5]);
							//create song
							Song s = new Song(m);
							u.getLibrary().addSong(s);
						}
					}
				}

				//friends
				lowerBound = upperBound + 2;
				upperBound = userData.indexOf(')', lowerBound);
				String friendsFull = userData.substring(lowerBound, upperBound);
				friendsFull = friendsFull.replaceAll(" ", "");
				String[] friends = friendsFull.split(",");

                //Not all users are loaded yet
				//Wait to add friends
				friendsToAdd.put(u, friends);
			}

			reader.close();

			for (Map.Entry<User, String[]> u : friendsToAdd.entrySet()) {
				for (int i = 0; i < u.getValue().length; ++i) {
					User friend = uMngr.findUser(u.getValue()[i]);
					if (friend != null) {
						u.getKey().addFriend(friend);
					}
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		if(uMngr.getUsers().isEmpty()) {
			User admin = new User("admin", "admin");
			uMngr.addUser(admin);
		}
	}
	
	public static void main(final String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				UI ui = new UI();
				ui.setTitle("Music Sharing Application");
				ui.parseFile(args[0]);
				ui.setLocationRelativeTo(null);
				ui.setVisible(true);
				ui.tabs.setVisible(false);
				ui.logoutPane.setVisible(false);

			}
		});
	}
//    
//    public void printLibrary() {
//    	printLibrary(this.currentUser);
//    }
//    
//    public void printLibrary(User u) {
//    	System.out.println(u.getName() + "'s Library \n----------------------------------------");
//    	
//    	for (Song s : u.getLibrary())
//    		System.out.println(s);
//    	
//    	System.out.println();
//    }
//    
//    public User getUser() {
//    	return this.currentUser;
//    }
//    
//    public boolean loggedIn() {
//    	if (currentUser != null) return true;
//    	else return false;
//    }
//    
//    public boolean doLogin(String username, String password) 
//    {
//    	User user = uMngr.findUser(username);
//    	
//    	if (user.checkPassword(password)) {
//    		this.currentUser = user;
//    		return true;
//    	}
//    	
//    	return false;
//    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList AllOnlineUsersList;
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton addAsFriendButton;
    private javax.swing.JButton addSongButton;
    private javax.swing.JButton addSongsToPlaylist;
    private javax.swing.JRadioButton allLibrariesRadio;
    private javax.swing.JLabel allOnlineUsersLabel;
    private javax.swing.JPanel allUsersPanel;
    private javax.swing.JButton allowBorrowButton;
    private javax.swing.JRadioButton anyoneRadio;
    private javax.swing.JButton borrowButton;
    private javax.swing.JList borrowRequestList;
    private javax.swing.JPanel borrowRequestPanel;
    private javax.swing.JLabel borrowedLabel;
    private javax.swing.JList borrowedList;
    private javax.swing.JButton browseFriendsLibraryButton;
    private javax.swing.JButton createPlaylistButton;
    private javax.swing.JLabel currentlyDownloadedLabel;
    private javax.swing.JLabel currentlyPlayingLabel;
    private javax.swing.JButton declineButton;
    private javax.swing.JButton deletePlaylistButton;
    private javax.swing.JButton denyBorrowButton;
    private javax.swing.JButton downloadSongsButton;
    private javax.swing.JList downloadedList;
    private javax.swing.JLabel downloadedSongsLabel;
    private javax.swing.JButton expireDownloadButton;
    private javax.swing.JPanel friendRequestPanel;
    private javax.swing.JRadioButton friendsLibrariesRadio;
    private javax.swing.JList friendsList;
    private javax.swing.JRadioButton friendsOnlyRadio;
    private javax.swing.JPanel friendsPanel;
    private javax.swing.JList invitesList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.ButtonGroup libraryAvailabilityGroup;
    private javax.swing.JPanel libraryPanel;
    private javax.swing.JLabel loanedLabel;
    private javax.swing.JList loanedList;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginPane;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel logoutPane;
    private javax.swing.JRadioButton noAvailabilityRadio;
    private javax.swing.JRadioButton ownLibraryRadio;
    private javax.swing.JLabel ownedLabel;
    private javax.swing.JList ownedList;
    private javax.swing.JButton passTimeButton;
    private javax.swing.JPasswordField passwordInput;
    private javax.swing.JButton playButton;
    private javax.swing.JList playListList;
    private javax.swing.JPanel playlistPanel;
    private javax.swing.JButton removeFriendButton;
    private javax.swing.JButton removeSongButton;
    private javax.swing.JButton removeSongFromPlayListButton;
    private javax.swing.JButton searchButton;
    private javax.swing.ButtonGroup searchGroup;
    private javax.swing.JTextField searchInput;
    private javax.swing.JList searchList;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JButton songDetailsButton;
    private javax.swing.JButton songPermButton;
    private javax.swing.ButtonGroup songPermGroup;
    private javax.swing.JButton sortButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JButton takeBackButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel topBorrowedLabel;
    private javax.swing.JList topBorrowedList;
    private javax.swing.JLabel topDownloadedLabel;
    private javax.swing.JList topDownloadedList;
    private javax.swing.JLabel topPlayedLabel;
    private javax.swing.JList topPlayedList;
    private javax.swing.JPanel trendingPanel;
    private javax.swing.JTextField usernameInput;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
